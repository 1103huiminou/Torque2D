// Warning!  This file is not real C++ code!  It is designed to provide types and operators, etc.
// that are needed by Doxygen to create a TorqueScript reference.  As long as the
// #define PSEUDOCODE_FOR_DOXYGEN is not set while compiling, there will be no issues.

// Define a doxygen group for all TorqueScript functions to live within
// Clusters of functions -- such as vector functions or event schedule functions --
// should be kept within a subgroup of the TorqueScriptFunction umbrella group
/*!
   @defgroup TorqueScriptFunctions Function Categories
*/

//-----------------------------------------------
// TorqueScript Data Types
//-----------------------------------------------

/*!
   @defgroup TorqueScriptTypes Data Types
      @{
*/

/*! Integers are whole numbers.

	~~~
	123
	0xc001   // you can use 0x followed by hexadecimal digits
	~~~
*/
typedef type Integer;

/*! Float, is a floating point number which can hold decimal values.

	~~~
	1.234
	1234e-3  // you can use scientific notion
	~~~
*/
typedef type Float;

/*! Text, such as names or phrases, are supported as strings.

	Numbers can also be stored in ::String format. Standard strings are stored in double-quotes.

	@par Example
	~~~
	"abcd"
	~~~

	@par Example
	~~~
	$UserName = "Heather";
	~~~
	
	Tagged strings are special in that they contain string data, but also have a special numeric tag associated with them. Tagged strings are used for sending string data across a network. The value of a tagged string is only sent once, regardless of how many times you actually do the sending.

	On subsequent sends, only the tag value is sent. Tagged values must be de-tagged when printing. You will not need to use a tagged string often unless you are in need of sending strings across a network often, like a chat system.

	@par Example
	~~~
		$a = 'This is a tagged string';
		echo("  Tagged string: ", $a);
		echo("Detagged string: ", detag('$a'));
	~~~
	The output will be similar to this:
	~~~
		24
		____
	~~~

	The second echo will be blank unless the string has been passed to you over a network.
*/
typedef type String;

/*! Boolean "numbers" have only two values - true or false.

	true    (1)
	false   (0)

	The constant `true` evaluates to the number 1 in TorqueScript, and the constant `false` evaluates to the number 0. However, non-zero values are also considered true. Think of booleans as "on/off" switches, often used in conditional statements.

	@par Example
	~~~
	$lightsOn = true;
	
	if($lightsOn)
		echo("Lights are turned on");
	~~~
*/
typedef type Boolean;

/*!  Arrays are data structures used to store consecutive values of the same data type.

	+ $TestArray[n]   (Single-dimension)
	+ $TestArray[m,n] (Multidimensional)
	+ $TestArray[m_n] (Multidimensional)

	@par Example
	~~~
	$userNames[0] = "Heather";
	$userNames[1] = "Nikki";
	$userNames[2] = "Mich";
	echo($userNames[0]);
	echo($userNames[1]);
	echo($userNames[2]);
	~~~
*/
typedef type Array;

/*! Vector2 is a ::String of two numbers (::Float or ::Integer) separated by a space.

	It is a special case of a Vector.  Note that TorqueScript does not check that you have exactly
	two elements.  The type Vector2 is used here to remind you what is expected by a function, for instance.
*/
typedef type Vector2;

/*! Vector is a ::String of any number of values separated by spaces between each.

	~~~
	%position = "25 32";
	%color = %red SPC %blue SPC %green SPC %alpha;
	~~~
*/
typedef type Vector;


/*! @} */ // data types
//-----------------------------------------------
// End TorqueScript Data Types
//-----------------------------------------------

//-----------------------------------------------
// TorqueScript Operators
//-----------------------------------------------

/*!
   @defgroup Operators Operators
   @{
*/

/*! @defgroup StringOperators String Operators
	@{
*/

/*! Concatenates two Strings into a single ::String separated by a space.

	Note: such a ::String can be decomposed with getWord()

	@par example
	~~~
	%newString = "Hello" SPC "World";
	echo(%newString);

	OUTPUT:
	Hello World
	~~~
*/
typedef type SPC;

/*! Concatenates two strings into a single ::String separated by a tab.

	Note: such a ::String can be decomposed with getField()

	@par example
	~~~
	%newString = "Hello" TAB "World";
	echo(%newString);

	OUTPUT:
	Hello	World
	~~~
*/
typedef type TAB;

/*! Concatenates two strings into a single ::String with no separation.

	@par example
	~~~
	%newString = "Hello" @ "World";
	echo(%newString);

	OUTPUT:
	HelloWorld
	~~~
*/
typedef type operator @;

/*! Concatenates two strings into a single ::String separated by a new-line.

	@par example
	~~~
	%newString = "Hello" NL "World";
	echo(%newString);

	OUTPUT: 
	Hello
	World
	~~~
*/
typedef type NL;

/*! @} */ // string operators

/*! @defgroup mathOperators Arithmetic Operators
	@{
*/

/*! @} */ // arithmetic operators

/*! @} */ // all operators
//-----------------------------------------------
// End TorqueScript Operators
//-----------------------------------------------
